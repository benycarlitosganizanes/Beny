

dicionario_programacao = {
    
    'package': 'pacote',
    'argument': 'argumento',
    'parameter': 'parÃ¢metro',
    'class': 'classe',
    'object': 'objeto',
    'method': 'mÃ©todo',
    'inheritance': 'heranÃ§a',
    'interface': 'interface',
    'exception': 'exceÃ§Ã£o',
    'error': 'erro',
    'attribute': 'atributo',
    'pointer': 'ponteiro',
    'reference': 'referÃªncia',
    'operator': 'operador',
    'statement': 'declaraÃ§Ã£o',
    'expression': 'expressÃ£o',
    'conditional': 'condicional',
    'iteration': 'iteraÃ§Ã£o',
    'algorithm': 'algoritmo',
    'binary': 'binÃ¡rio',
    'concatenation': 'concatenaÃ§Ã£o', 
    'assignment': 'atribuiÃ§Ã£o',
    'scope': 'escopo',
    'syntax': 'sintaxe',
    'comment': 'comentÃ¡rio',
    'framework': 'framework',
    'library': 'biblioteca',
    'debugging': 'depuraÃ§Ã£o',
    'compile': 'compilar',
    'interpreter': 'interpretador',
    'recursion': 'recursÃ£o',
    'encapsulation': 'encapsulamento',
    'polymorphism': 'polimorfismo',
    'abstraction': 'abstraÃ§Ã£o',
    'namespace': 'namespace',
    'protocol': 'protocolo',
    'callback': 'callback',
    'package manager': 'gerenciador de pacotes',
    'dependency': 'dependÃªncia',
    'backend': 'backend ou parte de trÃ¡s (como referÃªncia ao servidor)',
    'frontend': 'frontend ou parte da frente (referente Ã  interface do usuÃ¡rio)',
    'endpoint': 'endpoint',
    'middleware': 'middleware',
    'prototype': 'protÃ³tipo',
    'version control': 'controle de versÃ£o',
    'merge': 'mesclar',
    'branch': 'ramificaÃ§Ã£o',
    'commit': 'commit ou confirmaÃ§Ã£o',
    'pull request': 'solicitaÃ§Ã£o de pull',
    'code review': 'revisÃ£o de cÃ³digo',
    'agile': 'Ã¡gil',
    'scrum': 'scrum',
    'sprint': 'sprint',
    'user story': 'histÃ³ria do usuÃ¡rio',
    'product owner': 'dono do produto',
    'scrum master': 'scrum master',
    'continuous integration': 'integraÃ§Ã£o contÃ­nua',
    'continuous deployment': 'implantaÃ§Ã£o contÃ­nua',
    'devops': 'devops',
    'container': 'contÃªiner',
    'virtual machine': 'mÃ¡quina virtual',
    'api': 'api ou interface de programaÃ§Ã£o de aplicaÃ§Ãµes',
    'sdk': 'kit de desenvolvimento de software (software development kit)',
    'data structure': 'estrutura de dados',
    'linked list': 'lista encadeada',
    'stack': 'pilha',
    'queue': 'fila',
    'tree': 'Ã¡rvore',
    'graph': 'grafo',
    'hash table': 'tabela hash',
    'binary search': 'busca binÃ¡ria',
    'depth-first search (dfs)': 'busca em profundidade',
    'breadth-first search (bfs)': 'busca em largura',
    'dynamic programming': 'programaÃ§Ã£o dinÃ¢mica',
    'greedy algorithm': 'algoritmo guloso',
    'big o notation': 'notaÃ§Ã£o big o',
    'asymptotic analysis': 'anÃ¡lise assintÃ³tica',
    'backtracking': 'retrocesso',
    'dijkstra\'s algorithm': 'algoritmo de dijkstra',
    'bellman-ford algorithm': 'algoritmo de bellman-ford',
    'floyd-warshall algorithm': 'algoritmo de floyd-warshall',
    'kruskal\'s algorithm': 'algoritmo de kruskal',
    'prim\'s algorithm': 'algoritmo de prim',
    'topological sort': 'ordenÃ§Ã£o topolÃ³gica',
    'heap': 'heap ou montÃ­culo',
    'priority queue': 'fila de prioridade',
    'trie': 'trie ou Ã¡rvore digital',
    'red-black tree': 'Ã¡rvore rubro-negra',
    'avl tree': 'Ã¡rvore avl',
    'segment tree': 'Ã¡rvore de segmentos',
    'binary indexed tree (bit)': 'Ã¡rvore binÃ¡ria indexada',
    'fenwick tree': 'Ã¡rvore de fenwick',
    'suffix array': 'arranjo de sufixos',
    'suffix tree': 'Ã¡rvore de sufixos',
    'bloom filter': 'filtro de bloom',
    'spanning tree': 'Ã¡rvore geradora',
    'minimum spanning tree (mst)': 'Ã¡rvore geradora mÃ­nima', 'transversal': 'travessia',
    'serialization': 'serializaÃ§Ã£o',
    'deserialization': 'desserializaÃ§Ã£o',
    'concurrency': 'concorrÃªncia',
    'parallelism': 'paralelismo',
    'thread': 'thread ou rosca',
    'mutex': 'mutex',
    'semaphore': 'semÃ¡foro',
    'deadlock': 'deadlock ou impasse',
    'race condition': 'condiÃ§Ã£o de corrida',
    'critical section': 'seÃ§Ã£o crÃ­tica',
    'synchronization': 'sincronizaÃ§Ã£o',
    'cache': 'cache ou cachÃª',
    'ram': 'ram ou memÃ³ria principal',
    'rom': 'rom ou memÃ³ria de somente leitura',
    'cpu': 'cpu ou unidade central de processamento',
    'gpu': 'gpu ou unidade de processamento grÃ¡fico',
    'disk': 'disco',
    'ssd': 'ssd ou unidade de estado sÃ³lido',
    'hdd': 'hdd ou disco rÃ­gido',
    'file system': 'sistema de arquivos',
    'binary file': 'arquivo binÃ¡rio',
    'text file': 'arquivo de texto',
    'directory': 'diretÃ³rio',
    'path': 'caminho',
    'root': 'raiz',
    'file descriptor': 'descritor de arquivo',
    'i/o': 'e/s ou entrada/saÃ­da',
    'file i/o': 'e/s de arquivo',
    'network': 'rede',
    'tcp/ip': 'tcp/ip',
    'http': 'http',
    'https': 'https',
    'ftp': 'ftp ou protocolo de transferÃªncia de arquivos',
    'api': 'api ou interface de programaÃ§Ã£o de aplicaÃ§Ãµes',
    'restful': 'restful',
    'json': 'json ou notaÃ§Ã£o de objeto javascript',
    'xml': 'xml ou linguagem de marcaÃ§Ã£o extensÃ­vel',
    'soap': 'soap ou protocolo de acesso a objeto simples',
    'websocket': 'websocket',
    'dns': 'dns ou sistema de nomes de domÃ­nio',
    'url': 'url ou localizador uniforme de recursos',
    'uri': 'uri ou identificador de recursos uniforme',
    'ssl/tls': 'ssl/tls',
    'ssh': 'ssh ou shell seguro',
    'firewall': 'firewall',
    'proxy': 'proxy',
    'load balancing': 'balanceamento de carga',
    'packet': 'pacote',
    'routing': 'roteamento',
    'ipv4': 'ipv4',
    'ipv6': 'ipv6',
    'lan': 'lan ou rede local',
    'wan': 'wan ou rede de Ã¡rea ampla',
    'vpn': 'vpn ou rede privada virtual',
    'ethernet': 'ethernet',
    'wireless': 'sem fio',
    'bluetooth': 'bluetooth',
    'iot': 'iot ou internet das coisas',
    'sensor': 'sensor',
    'actuator': 'atuador',
    'microcontroller': 'microcontrolador',
    'microprocessor': 'microprocessador',
    'compiler': 'compilador',
    'interpreter': 'interpretador',
    'source code': 'cÃ³digo fonte',
    'executable': 'executÃ¡vel',
    'binary code': 'cÃ³digo binÃ¡rio',
    'bytecode': 'bytecode ou cÃ³digo de byte',
    'assembler': 'assembler ou montador',
    'machine code': 'cÃ³digo de mÃ¡quina',
    'ide': 'ide ou ambiente de desenvolvimento integrado',
    'text editor': 'editor de texto',
    'debugger': 'depurador',
    'profiler': 'profiler ou perfilador',
    'refactoring': 'refatoraÃ§Ã£o',
    'variable declaration': 'declaraÃ§Ã£o de variÃ¡vel',
    'data type': 'tipo de dados',
    'assignment operator': 'operador de atribuiÃ§Ã£o',
    'arithmetic operator': 'operador aritmÃ©tico',
    'logical operator': 'operador lÃ³gico',
    'comparison operator': 'operador de comparaÃ§Ã£o',
    'increment operator': 'operador de incremento',
    'decrement operator': 'operador de decremento',
    'ternary operator': 'operador ternÃ¡rio',
    'conditional statement': 'instruÃ§Ã£o condicional',
    'if statement': 'instruÃ§Ã£o if',
    'else statement': 'instruÃ§Ã£o else',
    'else if statement': "instruÃ§Ãµes else + if que na lÃ³gica vai resultar um if "




}

def sobre_me():
    print("â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”")
    print("ðŸ“šOlÃ¡, meu nome Ã© Beny, tenho 20 anos e atualmente estou fazendo mestrado em ensino de inglÃªs para ESL na Universidade Licungo de MoÃ§ambique. Sou um estudante apaixonado por tecnologia, principalmente quando se trata de programar em Python 3. Estou aprendendo aos poucos, contando com a ajuda de bons amigos online e grupos. Acredito que em breve poderei me considerar um programador. Confira meu canal no YouTube, onde falo sobre vÃ¡rios temas de tecnologia, desde o bÃ¡sico atÃ© o avanÃ§ado, do especÃ­fico ao geral:ðŸ”°ðŸ”°")
    print("____________________________________________________________") 
    print("ðŸ”›Canal YouTube: https://youtube.com/@benysartandroidmoz1141?sub_confirmation=1")
    print("â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”\n")
    print('WhatsApp:\n')
    print('ðŸ“ŒðŸ“Œ+258863679623ðŸ”›')
    print("â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”\n")

def pesquisar_termo(nome):
    if nome in dicionario_programacao:
        return dicionario_programacao[nome]
    else:
        return "Desculpe, o termo nÃ£o estÃ¡ disponÃ­vel ainda."

def listar_por_letra(letra):
    termos_encontrados = [termo for termo in dicionario_programacao.keys() if termo.startswith(letra.lower() or letra.upper())]
    if termos_encontrados:
        return termos_encontrados
    else:
        return "Nenhum termo encontrado para essa letra. Por favor, reporte ao programador."

def main():
    while True:
        print("ðŸ”°SEJAM BEM-VINDOS DEVS ðŸ”°")
        print("Programa dedicado a vocÃªs!!!\n ")
        print("1. Pesquisar por nome")
        print("2. Procurar por letra inicial")
        print("3. Sobre o Programa")
        print("4. Sobre o Programador")
        print("5. Sair\n")
        print('_____////____////_____////____////____////___////____////,\n')

        opcao = input("ðŸ”°Digite o nÃºmero da opÃ§Ã£o desejada: ")

        if opcao == '1':
            termo_pesquisado = input("Digite o termo que deseja pesquisar:\n ")
            resultado_pesquisa = pesquisar_termo(termo_pesquisado.lower())
            print(resultado_pesquisa)
            continuar = input("Deseja continuar? (S/N): ")
            if continuar.upper() != 'S':
                break
        elif opcao == '2':
            letra_inicial = input("Digite a letra inicial para buscar termos:\n ")
            termos_encontrados = listar_por_letra(letra_inicial.lower())
            print(termos_encontrados)
            continuar = input("Deseja continuar? (S/N): ")
            if continuar.upper() != 'S':
                break
        elif opcao == '3':
            sobre_me()
        elif opcao == '4':
            sobre_me()
        elif opcao == '5':
            print("Saindo do programa...")
            break
        else:
            print("OpÃ§Ã£o invÃ¡lida. Tente novamente.")

if __name__ == "__main__":
    main()
